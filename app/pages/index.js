import React, { useState, useEffect, useRef } from "react";
import Head from "next/head";
import { Document, Page } from "react-pdf";
import { PlayIcon } from "@heroicons/react/outline";
import LanguageDropdown from "@/components/LanguageDropdown";
import axios from "axios";
import TextLoadingSkeleton from "@/components/TextLoadingSkeleton";
import AudioRecorder from "@/components/AudioRecorder";

const voiceURIsToLanguageCode = {
  en: "Alex",
  ar: "Maged",
  zh: "Ting-Ting",
  es: "Juan",
  hi: "Lekha",
  fr: "Amelie",
};

const SummaryButton = ({ languageCode, summary }) => {
  const synthRef = useRef(window.speechSynthesis);
  const [speaking, setSpeaking] = useState(false);
  const [selectedVoice, setSelectedVoice] = useState(null);

  useEffect(() => {
    const selectedVoice = synthRef.current
      .getVoices()
      .filter(
        (voice) => voice.voiceURI === voiceURIsToLanguageCode[languageCode]
      )[0];

    setSelectedVoice(selectedVoice);
  }, [languageCode]);

  const utter = () => {
    if (synthRef.current.speaking) {
      synthRef.current.cancel();
      setSpeaking(false);
      return;
    }

    const utterThis = new SpeechSynthesisUtterance(summary);

    utterThis.voice = selectedVoice;
    synthRef.current.speak(utterThis);
    setSpeaking(true);
  };

  return (
    <button
      onClick={utter}
      className='inline-flex rounded-full bg-blue-600 hover:bg-blue-700 focus:outline-none text-white font-bold px-6 py-2 focus:ring ring-blue-600 ring-offset-2'>
      <PlayIcon className='w-6 h-6 mr-1 mt-[1px]' />
      {speaking ? "Cancel" : "Listen"}
    </button>
  );
};

export default function Home() {
  const [language, setLanguage] = useState({
    name: "English",
    svg: "https://lipis.github.io/flag-icon-css/flags/4x3/us.svg",
    code: "en",
  });

  const [outputLoading, setOutputLoading] = useState(false);
  const [rawText, setRawText] = useState(null);
  const [englishTranscript, setEnglishTranscript] = useState(null);
  const [episodeTranscript, setEpisodeTranscript] = useState(null);
  const [numPages, setNumPages] = useState(null);
  const [pageNumber, setPageNumber] = useState(1);

  function onDocumentLoadSuccess({ numPages }) {
    setNumPages(numPages);
  }

  useEffect(() => {
    setOutputLoading(true);

    axios.get("/api/parse-pdf").then(async (response) => {
      const {
        data: { summary },
      } = response.data;

      setEnglishTranscript(summary);
      setEpisodeTranscript(summary);
    });

    setOutputLoading(false);
  }, []);

  useEffect(() => {
    console.log("started");
    axios
      .post("/api/proxy?proxyRoute=pdf2text", {
        url: "https://firebasestorage.googleapis.com/v0/b/house-site-bbb7a.appspot.com/o/World_Wide_Corp_lorem.pdf?alt=media&token=815a4a1c-33ae-44dd-abed-a3395b05504f",
      })
      .then(async (response) => {
        const { text } = response.data;
        setRawText(text);
      })
      .catch((err) => {
        console.log(err);
      });
  }, []);

  useEffect(() => {
    if (language.code === "en") {
      setEpisodeTranscript(englishTranscript);
      return;
    }

    setOutputLoading(true);

    axios
      .post(`/api/proxy?proxyRoute=translator`, {
        from: "en",
        to: language.code,
        text: englishTranscript,
      })
      .then(async (response) => {
        const data = response.data;
        setEpisodeTranscript(data.result);
        setOutputLoading(false);
      });
  }, [language]);

  return (
    <div className='bg-white'>
      <Head>
        <title>Signabled</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='pt-36 max-w-screen-2xl mx-auto px-12'>
        <div className='w-full flex flex-col lg:flex-row'>
          <div className='w-full lg:w-5/12'>
            <h1 className='text-left text-3xl text-blue-800 font-bold mb-4'>
              PDF Preview
            </h1>
            <div className='relative'>
              <Document
                file='./example.pdf'
                options={{ workerSrc: "/pdf.worker.js" }}
                onLoadSuccess={onDocumentLoadSuccess}>
                <Page pageNumber={pageNumber} />
              </Document>

              <div className='absolute top-0 -right-12'>
                <div className='flex items-start flex-row space-x-4'>
                  {rawText && (
                    <SummaryButton summary={rawText} languageCode='en' />
                  )}
                  {/* <button className='inline-flex items-center px-6 py-2 bg-green-600 rounded-sm text-white font-medium border-none focus:outline-none hover:bg-green-700 shadow-lg text-sm focus:ring ring-green-600 ring-offset-2'>
                    <DocumentTextIcon className='w-6 h-6 mr-1' />
                    Summarize
                  </button> */}
                </div>
              </div>
            </div>
          </div>
          <div className='h-full w-full lg:w-6/12 ml-auto'>
            <div className='flex flex-row items-between justify-between mb-4'>
              <h1 className='text-left text-3xl text-blue-800 font-bold mb-4'>
                Output
              </h1>
              <LanguageDropdown selected={language} setSelected={setLanguage} />
            </div>
            {outputLoading || !episodeTranscript ? (
              <TextLoadingSkeleton />
            ) : (
              <div className='relative'>
                <textarea
                  readOnly
                  value={episodeTranscript}
                  className='flex items-center justify-center rounded-lg w-full h-96 border-4 border-blue-600 focus:border-blue-700 focus:outline-none py-2 px-4 text-md text-base leading-relaxed text-gray-700'
                  type='text'
                />
                <div className='absolute bottom-0 right-0 m-4'>
                  <SummaryButton
                    languageCode={language.code}
                    summary={episodeTranscript}
                  />
                </div>
              </div>
            )}
            <div className='mt-4 ring-offset-4 inline-flex items-center text-base text-gray-600 font-md font-medium'>
              Waiver Document for the{" "}
              <img className='h-4 ml-2' src='./aapd.png' alt='AAPD' />
            </div>
            <div className='mt-12'>
              <AudioRecorder />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
